
Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00804000  00000dbc  00000e50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  0080401c  0080401c  00000e6c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ec8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a41  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000341d  00000000  00000000  00005a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f27  00000000  00000000  00008e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00009db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cf5  00000000  00000000  00009fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006fa  00000000  00000000  0000bce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000c3db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	ec eb       	ldi	r30, 0xBC	; 188
 108:	fd e0       	ldi	r31, 0x0D	; 13
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	ac 31       	cpi	r26, 0x1C	; 28
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	ac e1       	ldi	r26, 0x1C	; 28
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	ab 36       	cpi	r26, 0x6B	; 107
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 3f 02 	call	0x47e	; 0x47e <main>
 12e:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <lcd_spi_transmit_CMD>:
#include "LCD_DOG_avr128_driver.h"


///////////////////////// Driver Functions //////////////////////////

void lcd_spi_transmit_CMD (unsigned char cmd) {
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	1f 92       	push	r1
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t read;
	//RS = 0 for command
	PORTC.OUT = 0x00;
 140:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <__TEXT_REGION_LENGTH__+0x7e0444>
	
	//select CS_bar
	PORTA.OUT &= ~(1 << 7);
 144:	e0 e0       	ldi	r30, 0x00	; 0
 146:	f4 e0       	ldi	r31, 0x04	; 4
 148:	94 81       	ldd	r25, Z+4	; 0x04
 14a:	9f 77       	andi	r25, 0x7F	; 127
 14c:	94 83       	std	Z+4, r25	; 0x04
	
	//start transmission of data
	SPI0.DATA = cmd;
 14e:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	
	/*wait for transmission to be complete*/
	while(!(SPI0.INTFLAGS & SPI_IF_bm)){};
 152:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 156:	88 23       	and	r24, r24
 158:	e4 f7       	brge	.-8      	; 0x152 <lcd_spi_transmit_CMD+0x1c>

	//deselect CS_bar
	PORTA.OUT |= (1 << 7);
 15a:	e0 e0       	ldi	r30, 0x00	; 0
 15c:	f4 e0       	ldi	r31, 0x04	; 4
 15e:	84 81       	ldd	r24, Z+4	; 0x04
 160:	80 68       	ori	r24, 0x80	; 128
 162:	84 83       	std	Z+4, r24	; 0x04
	
	//clear IF flag
	SPI0.INTFLAGS = SPI_IF_bm;
 164:	e0 e4       	ldi	r30, 0x40	; 64
 166:	f9 e0       	ldi	r31, 0x09	; 9
 168:	80 e8       	ldi	r24, 0x80	; 128
 16a:	83 83       	std	Z+3, r24	; 0x03
	read = SPI0.DATA;
 16c:	84 81       	ldd	r24, Z+4	; 0x04
 16e:	89 83       	std	Y+1, r24	; 0x01
}
 170:	0f 90       	pop	r0
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <lcd_spi_transmit_DATA>:

void lcd_spi_transmit_DATA (unsigned char cmd) {
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	1f 92       	push	r1
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t read;
	//RS = 1 for data
	PORTC.OUT = (1 << 0);
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <__TEXT_REGION_LENGTH__+0x7e0444>
	
	//select CS_bar
	PORTA.OUT &= ~(1 << 7);
 188:	e0 e0       	ldi	r30, 0x00	; 0
 18a:	f4 e0       	ldi	r31, 0x04	; 4
 18c:	94 81       	ldd	r25, Z+4	; 0x04
 18e:	9f 77       	andi	r25, 0x7F	; 127
 190:	94 83       	std	Z+4, r25	; 0x04
	
	//start transmission of data
	SPI0.DATA = cmd;
 192:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	
	/*wait for transmission to be complete*/
	while(!(SPI0.INTFLAGS & SPI_IF_bm)){};
 196:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 19a:	88 23       	and	r24, r24
 19c:	e4 f7       	brge	.-8      	; 0x196 <lcd_spi_transmit_DATA+0x1e>

	//deselect CS_bar
	PORTA.OUT |= (1 << 7);
 19e:	e0 e0       	ldi	r30, 0x00	; 0
 1a0:	f4 e0       	ldi	r31, 0x04	; 4
 1a2:	84 81       	ldd	r24, Z+4	; 0x04
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	84 83       	std	Z+4, r24	; 0x04
	
	//clear IF flag
	SPI0.INTFLAGS = SPI_IF_bm;
 1a8:	e0 e4       	ldi	r30, 0x40	; 64
 1aa:	f9 e0       	ldi	r31, 0x09	; 9
 1ac:	80 e8       	ldi	r24, 0x80	; 128
 1ae:	83 83       	std	Z+3, r24	; 0x03
	read = SPI0.DATA;
 1b0:	84 81       	ldd	r24, Z+4	; 0x04
 1b2:	89 83       	std	Y+1, r24	; 0x01
}
 1b4:	0f 90       	pop	r0
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <init_spi_lcd>:
	
	//PA4 SPI0 MOSI configured as an output
	//PA5 SPIO MISO configured as an input
	//PA6 SCK configured as an output
	//PA7 set as slave select
	PORTA.DIR = (1 << 4)|(1 << 6)|(1<<7);
 1bc:	e0 e0       	ldi	r30, 0x00	; 0
 1be:	f4 e0       	ldi	r31, 0x04	; 4
 1c0:	80 ed       	ldi	r24, 0xD0	; 208
 1c2:	80 83       	st	Z, r24
	

	//PA7 SS_bar set to idle at logic 1
	PORTA.OUT = (1 << 7);
 1c4:	80 e8       	ldi	r24, 0x80	; 128
 1c6:	84 83       	std	Z+4, r24	; 0x04
	
	/*select SPI master by writing to master/slave bit
	in CTRLA, clock speed by writing to PRESC and CLK2X 
	bit and the order of transmission of the data with 
	the DORD bit*/
	SPI0.CTRLA =  SPI_MASTER_bm | SPI_CLK2X_bm;
 1c8:	e0 e4       	ldi	r30, 0x40	; 64
 1ca:	f9 e0       	ldi	r31, 0x09	; 9
 1cc:	80 e3       	ldi	r24, 0x30	; 48
 1ce:	80 83       	st	Z, r24
	
	/*SPI mode 3 for the DOG LCD*/
	/*SPI MODE 0 and slave select on master disabled*/
	SPI0.CTRLB = SPI_SSD_bm | 0x03 ;
 1d0:	87 e0       	ldi	r24, 0x07	; 7
 1d2:	81 83       	std	Z+1, r24	; 0x01
	
	/*Enable SPI*/
	SPI0.CTRLA |= SPI_ENABLE_bm;
 1d4:	80 81       	ld	r24, Z
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	80 83       	st	Z, r24
	
	/*PC0 for RS of LCD*/
	PORTC.DIR = (1 << 0);
 1da:	e0 e4       	ldi	r30, 0x40	; 64
 1dc:	f4 e0       	ldi	r31, 0x04	; 4
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	80 83       	st	Z, r24
	PORTC.OUT = 0x00;		//RS = 0 for command
 1e2:	14 82       	std	Z+4, r1	; 0x04
 1e4:	08 95       	ret

000001e6 <delay_40mS>:
}


void delay_40mS(void) {
int i;
for (int n = 40; n > 0; n--)
 1e6:	28 e2       	ldi	r18, 0x28	; 40
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	0b c0       	rjmp	.+22     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
for (i = 0; i < 800; i++)
__asm("nop");
 1ec:	00 00       	nop


void delay_40mS(void) {
int i;
for (int n = 40; n > 0; n--)
for (i = 0; i < 800; i++)
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <delay_40mS+0x10>
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	80 32       	cpi	r24, 0x20	; 32
 1f8:	43 e0       	ldi	r20, 0x03	; 3
 1fa:	94 07       	cpc	r25, r20
 1fc:	bc f3       	brlt	.-18     	; 0x1ec <delay_40mS+0x6>
}


void delay_40mS(void) {
int i;
for (int n = 40; n > 0; n--)
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	31 09       	sbc	r19, r1
 202:	12 16       	cp	r1, r18
 204:	13 06       	cpc	r1, r19
 206:	ac f3       	brlt	.-22     	; 0x1f2 <delay_40mS+0xc>
for (i = 0; i < 800; i++)
__asm("nop");
}
 208:	08 95       	ret

0000020a <delay_30uS>:

void delay_30uS(void) {
int i;
for (int n = 1; n > 0; n--)
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	0a c0       	rjmp	.+20     	; 0x224 <delay_30uS+0x1a>
for (i = 0; i < 2; i++)
__asm("nop");
 210:	00 00       	nop
}

void delay_30uS(void) {
int i;
for (int n = 1; n > 0; n--)
for (i = 0; i < 2; i++)
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	02 c0       	rjmp	.+4      	; 0x21a <delay_30uS+0x10>
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	91 05       	cpc	r25, r1
 21e:	c4 f3       	brlt	.-16     	; 0x210 <delay_30uS+0x6>
__asm("nop");
}

void delay_30uS(void) {
int i;
for (int n = 1; n > 0; n--)
 220:	21 50       	subi	r18, 0x01	; 1
 222:	31 09       	sbc	r19, r1
 224:	12 16       	cp	r1, r18
 226:	13 06       	cpc	r1, r19
 228:	b4 f3       	brlt	.-20     	; 0x216 <delay_30uS+0xc>
for (i = 0; i < 2; i++)
__asm("nop");
}
 22a:	08 95       	ret

0000022c <init_lcd_dog>:
}


void init_lcd_dog (void) {

init_spi_lcd();		//Initialize mcu for LCD SPI
 22c:	0e 94 de 00 	call	0x1bc	; 0x1bc <init_spi_lcd>

//start_dly_40ms:
delay_40mS();    //startup delay.
 230:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <delay_40mS>


//func_set1:
lcd_spi_transmit_CMD(0x39);   // sedn function set #1
 234:	89 e3       	ldi	r24, 0x39	; 57
 236:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_spi_transmit_CMD>
delay_30uS();	//delay for command to be processed
 23a:	0e 94 05 01 	call	0x20a	; 0x20a <delay_30uS>


//func_set2:
lcd_spi_transmit_CMD(0x39);	//send fuction set #2
 23e:	89 e3       	ldi	r24, 0x39	; 57
 240:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_spi_transmit_CMD>
delay_30uS();	//delay for command to be processed
 244:	0e 94 05 01 	call	0x20a	; 0x20a <delay_30uS>


//bias_set:
lcd_spi_transmit_CMD(0x1E);	//set bias value.
 248:	8e e1       	ldi	r24, 0x1E	; 30
 24a:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_spi_transmit_CMD>
delay_30uS();	//delay for command to be processed
 24e:	0e 94 05 01 	call	0x20a	; 0x20a <delay_30uS>


//power_ctrl:
lcd_spi_transmit_CMD(0x55);	//~ 0x50 nominal for 5V
 252:	85 e5       	ldi	r24, 0x55	; 85
 254:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_spi_transmit_CMD>
//~ 0x55 for 3.3V (delicate adjustment).
delay_30uS();	//delay for command to be processed
 258:	0e 94 05 01 	call	0x20a	; 0x20a <delay_30uS>


//follower_ctrl:
lcd_spi_transmit_CMD(0x6C);	//follower mode on...
 25c:	8c e6       	ldi	r24, 0x6C	; 108
 25e:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_spi_transmit_CMD>
delay_40mS();	//delay for command to be processed
 262:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <delay_40mS>


//contrast_set:
lcd_spi_transmit_CMD(0x7F);	//~ 77 for 5V, ~ 7F for 3.3V
 266:	8f e7       	ldi	r24, 0x7F	; 127
 268:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_spi_transmit_CMD>
delay_30uS();	//delay for command to be processed
 26c:	0e 94 05 01 	call	0x20a	; 0x20a <delay_30uS>


//display_on:
lcd_spi_transmit_CMD(0x0c);	//display on, cursor off, blink off
 270:	8c e0       	ldi	r24, 0x0C	; 12
 272:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_spi_transmit_CMD>
delay_30uS();	//delay for command to be processed
 276:	0e 94 05 01 	call	0x20a	; 0x20a <delay_30uS>


//clr_display:
lcd_spi_transmit_CMD(0x01);	//clear display, cursor home
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_spi_transmit_CMD>
delay_30uS();	//delay for command to be processed
 280:	0e 94 05 01 	call	0x20a	; 0x20a <delay_30uS>


//entry_mode:
lcd_spi_transmit_CMD(0x06);	//clear display, cursor home
 284:	86 e0       	ldi	r24, 0x06	; 6
 286:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_spi_transmit_CMD>
delay_30uS();	//delay for command to be processed
 28a:	0e 94 05 01 	call	0x20a	; 0x20a <delay_30uS>
 28e:	08 95       	ret

00000290 <update_lcd_dog>:
}


// Updates the LCD display lines 1, 2, and 3, using the
// contents of dsp_buff_1, dsp_buff_2, and dsp_buff_3, respectively.
void update_lcd_dog(void) {
 290:	cf 93       	push	r28
 292:	df 93       	push	r29

init_spi_lcd();		//init SPI port for LCD.
 294:	0e 94 de 00 	call	0x1bc	; 0x1bc <init_spi_lcd>

// send line 1 to the LCD module.
lcd_spi_transmit_CMD(0x80);	//init DDRAM addr-ctr
 298:	80 e8       	ldi	r24, 0x80	; 128
 29a:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_spi_transmit_CMD>
delay_30uS();
 29e:	0e 94 05 01 	call	0x20a	; 0x20a <delay_30uS>
for (int i = 0; i < 16; i++) {
 2a2:	c0 e0       	ldi	r28, 0x00	; 0
 2a4:	d0 e0       	ldi	r29, 0x00	; 0
 2a6:	09 c0       	rjmp	.+18     	; 0x2ba <update_lcd_dog+0x2a>
lcd_spi_transmit_DATA(dsp_buff1[i]);
 2a8:	fe 01       	movw	r30, r28
 2aa:	e4 5e       	subi	r30, 0xE4	; 228
 2ac:	ff 4b       	sbci	r31, 0xBF	; 191
 2ae:	80 81       	ld	r24, Z
 2b0:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_spi_transmit_DATA>
delay_30uS();
 2b4:	0e 94 05 01 	call	0x20a	; 0x20a <delay_30uS>
init_spi_lcd();		//init SPI port for LCD.

// send line 1 to the LCD module.
lcd_spi_transmit_CMD(0x80);	//init DDRAM addr-ctr
delay_30uS();
for (int i = 0; i < 16; i++) {
 2b8:	21 96       	adiw	r28, 0x01	; 1
 2ba:	c0 31       	cpi	r28, 0x10	; 16
 2bc:	d1 05       	cpc	r29, r1
 2be:	a4 f3       	brlt	.-24     	; 0x2a8 <update_lcd_dog+0x18>
lcd_spi_transmit_DATA(dsp_buff1[i]);
delay_30uS();
}

// send line 2 to the LCD module.
lcd_spi_transmit_CMD(0x90);	//init DDRAM addr-ctr
 2c0:	80 e9       	ldi	r24, 0x90	; 144
 2c2:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_spi_transmit_CMD>
delay_30uS();
 2c6:	0e 94 05 01 	call	0x20a	; 0x20a <delay_30uS>
for (int i = 0; i < 16; i++) {
 2ca:	c0 e0       	ldi	r28, 0x00	; 0
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
 2ce:	09 c0       	rjmp	.+18     	; 0x2e2 <update_lcd_dog+0x52>
lcd_spi_transmit_DATA(dsp_buff2[i]);
 2d0:	fe 01       	movw	r30, r28
 2d2:	e2 5d       	subi	r30, 0xD2	; 210
 2d4:	ff 4b       	sbci	r31, 0xBF	; 191
 2d6:	80 81       	ld	r24, Z
 2d8:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_spi_transmit_DATA>
delay_30uS();
 2dc:	0e 94 05 01 	call	0x20a	; 0x20a <delay_30uS>
}

// send line 2 to the LCD module.
lcd_spi_transmit_CMD(0x90);	//init DDRAM addr-ctr
delay_30uS();
for (int i = 0; i < 16; i++) {
 2e0:	21 96       	adiw	r28, 0x01	; 1
 2e2:	c0 31       	cpi	r28, 0x10	; 16
 2e4:	d1 05       	cpc	r29, r1
 2e6:	a4 f3       	brlt	.-24     	; 0x2d0 <update_lcd_dog+0x40>
lcd_spi_transmit_DATA(dsp_buff2[i]);
delay_30uS();
}

// send line 3 to the LCD module.
lcd_spi_transmit_CMD(0xA0);	//init DDRAM addr-ctr
 2e8:	80 ea       	ldi	r24, 0xA0	; 160
 2ea:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_spi_transmit_CMD>
delay_30uS();
 2ee:	0e 94 05 01 	call	0x20a	; 0x20a <delay_30uS>
for (int i = 0; i < 16; i++) {
 2f2:	c0 e0       	ldi	r28, 0x00	; 0
 2f4:	d0 e0       	ldi	r29, 0x00	; 0
 2f6:	09 c0       	rjmp	.+18     	; 0x30a <update_lcd_dog+0x7a>
lcd_spi_transmit_DATA(dsp_buff3[i]);
 2f8:	fe 01       	movw	r30, r28
 2fa:	e1 5c       	subi	r30, 0xC1	; 193
 2fc:	ff 4b       	sbci	r31, 0xBF	; 191
 2fe:	80 81       	ld	r24, Z
 300:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_spi_transmit_DATA>
delay_30uS();
 304:	0e 94 05 01 	call	0x20a	; 0x20a <delay_30uS>
}

// send line 3 to the LCD module.
lcd_spi_transmit_CMD(0xA0);	//init DDRAM addr-ctr
delay_30uS();
for (int i = 0; i < 16; i++) {
 308:	21 96       	adiw	r28, 0x01	; 1
 30a:	c0 31       	cpi	r28, 0x10	; 16
 30c:	d1 05       	cpc	r29, r1
 30e:	a4 f3       	brlt	.-24     	; 0x2f8 <update_lcd_dog+0x68>
lcd_spi_transmit_DATA(dsp_buff3[i]);
delay_30uS();
}
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <bargraph>:
		
	}
}

void bargraph(){
	I2C0_MCP23017_init();
 316:	0e 94 85 02 	call	0x50a	; 0x50a <I2C0_MCP23017_init>
	MCP23017_I2C0_init();
 31a:	0e 94 a4 02 	call	0x548	; 0x548 <MCP23017_I2C0_init>
		
	if(result_final[0] >= 400 && result_final[0] < 500 ){
 31e:	80 91 65 40 	lds	r24, 0x4065	; 0x804065 <result_final>
 322:	90 91 66 40 	lds	r25, 0x4066	; 0x804066 <result_final+0x1>
 326:	9c 01       	movw	r18, r24
 328:	20 59       	subi	r18, 0x90	; 144
 32a:	31 40       	sbci	r19, 0x01	; 1
 32c:	24 36       	cpi	r18, 0x64	; 100
 32e:	31 05       	cpc	r19, r1
 330:	30 f4       	brcc	.+12     	; 0x33e <bargraph+0x28>
		MCP23017_I2C_write(WRITE_opcode, OLATBaddr_b1, 0x7F);
 332:	4f e7       	ldi	r20, 0x7F	; 127
 334:	6a e1       	ldi	r22, 0x1A	; 26
 336:	80 e4       	ldi	r24, 0x40	; 64
 338:	0e 94 8e 02 	call	0x51c	; 0x51c <MCP23017_I2C_write>
 33c:	08 95       	ret
	}
	else if(result_final[0] >= 500 && result_final[0] < 600){
 33e:	9c 01       	movw	r18, r24
 340:	24 5f       	subi	r18, 0xF4	; 244
 342:	31 40       	sbci	r19, 0x01	; 1
 344:	24 36       	cpi	r18, 0x64	; 100
 346:	31 05       	cpc	r19, r1
 348:	30 f4       	brcc	.+12     	; 0x356 <bargraph+0x40>
		MCP23017_I2C_write(WRITE_opcode, OLATBaddr_b1, 0x3F);
 34a:	4f e3       	ldi	r20, 0x3F	; 63
 34c:	6a e1       	ldi	r22, 0x1A	; 26
 34e:	80 e4       	ldi	r24, 0x40	; 64
 350:	0e 94 8e 02 	call	0x51c	; 0x51c <MCP23017_I2C_write>
 354:	08 95       	ret
	}
	else if(result_final[0] >= 600 && result_final[0] < 700){
 356:	9c 01       	movw	r18, r24
 358:	28 55       	subi	r18, 0x58	; 88
 35a:	32 40       	sbci	r19, 0x02	; 2
 35c:	24 36       	cpi	r18, 0x64	; 100
 35e:	31 05       	cpc	r19, r1
 360:	30 f4       	brcc	.+12     	; 0x36e <bargraph+0x58>
		MCP23017_I2C_write(WRITE_opcode, OLATBaddr_b1, 0x1F);
 362:	4f e1       	ldi	r20, 0x1F	; 31
 364:	6a e1       	ldi	r22, 0x1A	; 26
 366:	80 e4       	ldi	r24, 0x40	; 64
 368:	0e 94 8e 02 	call	0x51c	; 0x51c <MCP23017_I2C_write>
 36c:	08 95       	ret
	}
	else if(result_final[0] >= 700 && result_final[0] < 800){
 36e:	9c 01       	movw	r18, r24
 370:	2c 5b       	subi	r18, 0xBC	; 188
 372:	32 40       	sbci	r19, 0x02	; 2
 374:	24 36       	cpi	r18, 0x64	; 100
 376:	31 05       	cpc	r19, r1
 378:	30 f4       	brcc	.+12     	; 0x386 <bargraph+0x70>
		MCP23017_I2C_write(WRITE_opcode, OLATBaddr_b1, 0x0F);
 37a:	4f e0       	ldi	r20, 0x0F	; 15
 37c:	6a e1       	ldi	r22, 0x1A	; 26
 37e:	80 e4       	ldi	r24, 0x40	; 64
 380:	0e 94 8e 02 	call	0x51c	; 0x51c <MCP23017_I2C_write>
 384:	08 95       	ret
	}
	else if(result_final[0] >= 800 && result_final[0] < 900){
 386:	9c 01       	movw	r18, r24
 388:	20 52       	subi	r18, 0x20	; 32
 38a:	33 40       	sbci	r19, 0x03	; 3
 38c:	24 36       	cpi	r18, 0x64	; 100
 38e:	31 05       	cpc	r19, r1
 390:	30 f4       	brcc	.+12     	; 0x39e <bargraph+0x88>
		MCP23017_I2C_write(WRITE_opcode, OLATBaddr_b1, 0x07);
 392:	47 e0       	ldi	r20, 0x07	; 7
 394:	6a e1       	ldi	r22, 0x1A	; 26
 396:	80 e4       	ldi	r24, 0x40	; 64
 398:	0e 94 8e 02 	call	0x51c	; 0x51c <MCP23017_I2C_write>
 39c:	08 95       	ret
	}
	else if(result_final[0] >= 900 && result_final[0] < 1000){
 39e:	9c 01       	movw	r18, r24
 3a0:	24 58       	subi	r18, 0x84	; 132
 3a2:	33 40       	sbci	r19, 0x03	; 3
 3a4:	24 36       	cpi	r18, 0x64	; 100
 3a6:	31 05       	cpc	r19, r1
 3a8:	30 f4       	brcc	.+12     	; 0x3b6 <bargraph+0xa0>
		MCP23017_I2C_write(WRITE_opcode, OLATBaddr_b1, 0x03);
 3aa:	43 e0       	ldi	r20, 0x03	; 3
 3ac:	6a e1       	ldi	r22, 0x1A	; 26
 3ae:	80 e4       	ldi	r24, 0x40	; 64
 3b0:	0e 94 8e 02 	call	0x51c	; 0x51c <MCP23017_I2C_write>
 3b4:	08 95       	ret
	}
	else if(result_final[0] >= 1000 && result_final[0] < 1100){
 3b6:	9c 01       	movw	r18, r24
 3b8:	28 5e       	subi	r18, 0xE8	; 232
 3ba:	33 40       	sbci	r19, 0x03	; 3
 3bc:	24 36       	cpi	r18, 0x64	; 100
 3be:	31 05       	cpc	r19, r1
 3c0:	30 f4       	brcc	.+12     	; 0x3ce <bargraph+0xb8>
		MCP23017_I2C_write(WRITE_opcode, OLATBaddr_b1, 0x03);
 3c2:	43 e0       	ldi	r20, 0x03	; 3
 3c4:	6a e1       	ldi	r22, 0x1A	; 26
 3c6:	80 e4       	ldi	r24, 0x40	; 64
 3c8:	0e 94 8e 02 	call	0x51c	; 0x51c <MCP23017_I2C_write>
 3cc:	08 95       	ret
	}
	else if(result_final[0] >= 1100 && result_final[0] < 1200){
 3ce:	8c 54       	subi	r24, 0x4C	; 76
 3d0:	94 40       	sbci	r25, 0x04	; 4
 3d2:	84 36       	cpi	r24, 0x64	; 100
 3d4:	91 05       	cpc	r25, r1
 3d6:	30 f4       	brcc	.+12     	; 0x3e4 <bargraph+0xce>
		MCP23017_I2C_write(WRITE_opcode, OLATBaddr_b1, 0x01);
 3d8:	41 e0       	ldi	r20, 0x01	; 1
 3da:	6a e1       	ldi	r22, 0x1A	; 26
 3dc:	80 e4       	ldi	r24, 0x40	; 64
 3de:	0e 94 8e 02 	call	0x51c	; 0x51c <MCP23017_I2C_write>
 3e2:	08 95       	ret
	}
	else {
		MCP23017_I2C_write(WRITE_opcode, OLATBaddr_b1, 0x00);
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	6a e1       	ldi	r22, 0x1A	; 26
 3e8:	80 e4       	ldi	r24, 0x40	; 64
 3ea:	0e 94 8e 02 	call	0x51c	; 0x51c <MCP23017_I2C_write>
 3ee:	08 95       	ret

000003f0 <USART_print>:
	}
		
}


void USART_print(){
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f4:	2f ef       	ldi	r18, 0xFF	; 255
 3f6:	84 e3       	ldi	r24, 0x34	; 52
 3f8:	9c e0       	ldi	r25, 0x0C	; 12
 3fa:	21 50       	subi	r18, 0x01	; 1
 3fc:	80 40       	sbci	r24, 0x00	; 0
 3fe:	90 40       	sbci	r25, 0x00	; 0
 400:	e1 f7       	brne	.-8      	; 0x3fa <USART_print+0xa>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 00       	nop
	_delay_ms(1000);
	//USART3 transmit
	for(int i = 0; i < 17; i++){
 406:	c0 e0       	ldi	r28, 0x00	; 0
 408:	d0 e0       	ldi	r29, 0x00	; 0
 40a:	07 c0       	rjmp	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		 UART_SendChar(dsp_buff1[i]);
 40c:	fe 01       	movw	r30, r28
 40e:	e4 5e       	subi	r30, 0xE4	; 228
 410:	ff 4b       	sbci	r31, 0xBF	; 191
 412:	80 81       	ld	r24, Z
 414:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <UART_SendChar>


void USART_print(){
	_delay_ms(1000);
	//USART3 transmit
	for(int i = 0; i < 17; i++){
 418:	21 96       	adiw	r28, 0x01	; 1
 41a:	c1 31       	cpi	r28, 0x11	; 17
 41c:	d1 05       	cpc	r29, r1
 41e:	b4 f3       	brlt	.-20     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		 UART_SendChar(dsp_buff1[i]);
	
	}
	
		 UART_SendChar('\r');
 420:	8d e0       	ldi	r24, 0x0D	; 13
 422:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <UART_SendChar>
		 UART_SendChar('\n');
 426:	8a e0       	ldi	r24, 0x0A	; 10
 428:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <UART_SendChar>
	
	for(int i = 0; i < 17; i++){
 42c:	c0 e0       	ldi	r28, 0x00	; 0
 42e:	d0 e0       	ldi	r29, 0x00	; 0
 430:	07 c0       	rjmp	.+14     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		 UART_SendChar(dsp_buff2[i]);
 432:	fe 01       	movw	r30, r28
 434:	e2 5d       	subi	r30, 0xD2	; 210
 436:	ff 4b       	sbci	r31, 0xBF	; 191
 438:	80 81       	ld	r24, Z
 43a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <UART_SendChar>
	}
	
		 UART_SendChar('\r');
		 UART_SendChar('\n');
	
	for(int i = 0; i < 17; i++){
 43e:	21 96       	adiw	r28, 0x01	; 1
 440:	c1 31       	cpi	r28, 0x11	; 17
 442:	d1 05       	cpc	r29, r1
 444:	b4 f3       	brlt	.-20     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		 UART_SendChar(dsp_buff2[i]);
	
	}
	
		 UART_SendChar('\r');
 446:	8d e0       	ldi	r24, 0x0D	; 13
 448:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <UART_SendChar>
		 UART_SendChar('\n');
 44c:	8a e0       	ldi	r24, 0x0A	; 10
 44e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <UART_SendChar>
	
	for(int i = 0; i < 17; i++){
 452:	c0 e0       	ldi	r28, 0x00	; 0
 454:	d0 e0       	ldi	r29, 0x00	; 0
 456:	07 c0       	rjmp	.+14     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
		 UART_SendChar(dsp_buff3[i]);
 458:	fe 01       	movw	r30, r28
 45a:	e1 5c       	subi	r30, 0xC1	; 193
 45c:	ff 4b       	sbci	r31, 0xBF	; 191
 45e:	80 81       	ld	r24, Z
 460:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <UART_SendChar>
	}
	
		 UART_SendChar('\r');
		 UART_SendChar('\n');
	
	for(int i = 0; i < 17; i++){
 464:	21 96       	adiw	r28, 0x01	; 1
 466:	c1 31       	cpi	r28, 0x11	; 17
 468:	d1 05       	cpc	r29, r1
 46a:	b4 f3       	brlt	.-20     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		 UART_SendChar(dsp_buff3[i]);
	
	}
	
		 UART_SendChar('\r');
 46c:	8d e0       	ldi	r24, 0x0D	; 13
 46e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <UART_SendChar>
		 UART_SendChar('\n');
 472:	8a e0       	ldi	r24, 0x0A	; 10
 474:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <UART_SendChar>
	
}
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <main>:

int main(void)
{


	init_lcd_dog();
 47e:	0e 94 16 01 	call	0x22c	; 0x22c <init_lcd_dog>
	UART_init(9600, 8, 'N');  /* Set the baudrate to 19,200 bps using a 3.6864MHz crystal */
 482:	4e e4       	ldi	r20, 0x4E	; 78
 484:	68 e0       	ldi	r22, 0x08	; 8
 486:	80 e8       	ldi	r24, 0x80	; 128
 488:	95 e2       	ldi	r25, 0x25	; 37
 48a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <UART_init>

	while (1)
	{
		I2C0_SCD40_init();
 48e:	0e 94 b4 02 	call	0x568	; 0x568 <I2C0_SCD40_init>
		
		SCD40_MEASUREMENT();
 492:	0e 94 1d 03 	call	0x63a	; 0x63a <SCD40_MEASUREMENT>
	
		conversion();
 496:	0e 94 30 03 	call	0x660	; 0x660 <conversion>
	
		sprintf(dsp_buff1, "CO2: %d ", result_final[0]);
 49a:	c5 e6       	ldi	r28, 0x65	; 101
 49c:	d0 e4       	ldi	r29, 0x40	; 64
 49e:	89 81       	ldd	r24, Y+1	; 0x01
 4a0:	8f 93       	push	r24
 4a2:	88 81       	ld	r24, Y
 4a4:	8f 93       	push	r24
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	90 e4       	ldi	r25, 0x40	; 64
 4aa:	9f 93       	push	r25
 4ac:	8f 93       	push	r24
 4ae:	8c e1       	ldi	r24, 0x1C	; 28
 4b0:	90 e4       	ldi	r25, 0x40	; 64
 4b2:	9f 93       	push	r25
 4b4:	8f 93       	push	r24
 4b6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <sprintf>
		sprintf(dsp_buff2, "Temp: %d ", result_final[1]);
 4ba:	8b 81       	ldd	r24, Y+3	; 0x03
 4bc:	8f 93       	push	r24
 4be:	8a 81       	ldd	r24, Y+2	; 0x02
 4c0:	8f 93       	push	r24
 4c2:	89 e0       	ldi	r24, 0x09	; 9
 4c4:	90 e4       	ldi	r25, 0x40	; 64
 4c6:	9f 93       	push	r25
 4c8:	8f 93       	push	r24
 4ca:	8e e2       	ldi	r24, 0x2E	; 46
 4cc:	90 e4       	ldi	r25, 0x40	; 64
 4ce:	9f 93       	push	r25
 4d0:	8f 93       	push	r24
 4d2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <sprintf>
		sprintf(dsp_buff3, "Hum: %d ", result_final[2]);
 4d6:	8d 81       	ldd	r24, Y+5	; 0x05
 4d8:	8f 93       	push	r24
 4da:	8c 81       	ldd	r24, Y+4	; 0x04
 4dc:	8f 93       	push	r24
 4de:	83 e1       	ldi	r24, 0x13	; 19
 4e0:	90 e4       	ldi	r25, 0x40	; 64
 4e2:	9f 93       	push	r25
 4e4:	8f 93       	push	r24
 4e6:	8f e3       	ldi	r24, 0x3F	; 63
 4e8:	90 e4       	ldi	r25, 0x40	; 64
 4ea:	9f 93       	push	r25
 4ec:	8f 93       	push	r24
 4ee:	0e 94 ff 03 	call	0x7fe	; 0x7fe <sprintf>
		
		update_lcd_dog();
 4f2:	0e 94 48 01 	call	0x290	; 0x290 <update_lcd_dog>
		
		bargraph();
 4f6:	0e 94 8b 01 	call	0x316	; 0x316 <bargraph>
		

		
		
		USART_print();
 4fa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <USART_print>
 4fe:	8d b7       	in	r24, 0x3d	; 61
 500:	9e b7       	in	r25, 0x3e	; 62
 502:	42 96       	adiw	r24, 0x12	; 18
 504:	8d bf       	out	0x3d, r24	; 61
 506:	9e bf       	out	0x3e, r25	; 62
 508:	c2 cf       	rjmp	.-124    	; 0x48e <main+0x10>

0000050a <I2C0_MCP23017_init>:
#include "MCP23017_driver.h"


void I2C0_MCP23017_init(void){
	//configure PA2 (SDA)  PA3 (SCl) as inputs
	PORTA.DIR = 0x00;
 50a:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
	
	//Master Baud rate set to 0
	TWI0.MBAUD = 0;
 50e:	e0 e0       	ldi	r30, 0x00	; 0
 510:	f9 e0       	ldi	r31, 0x09	; 9
 512:	16 82       	std	Z+6, r1	; 0x06
	
	//Enable the TWI master
	TWI0.MCTRLA = TWI_ENABLE_bm;
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	83 83       	std	Z+3, r24	; 0x03
	
	//Forcing Bus state to Idle
	TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
 518:	85 83       	std	Z+5, r24	; 0x05
 51a:	08 95       	ret

0000051c <MCP23017_I2C_write>:

void MCP23017_I2C_write(uint8_t opcode, uint8_t slave_register, uint8_t data){
	
	//Master starts performing a bus transaction
	//when then the master address register is written
	TWI0.MADDR = opcode;
 51c:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	
	//wait for data packet to be transmitted
	while(!(TWI0.MSTATUS & TWI_WIF_bm));
 520:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 524:	86 ff       	sbrs	r24, 6
 526:	fc cf       	rjmp	.-8      	; 0x520 <MCP23017_I2C_write+0x4>
	
	TWI0.MDATA = slave_register;
 528:	60 93 08 09 	sts	0x0908, r22	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	
	//wait for data packet to be transmitted
	while(!(TWI0.MSTATUS & TWI_WIF_bm));
 52c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 530:	86 ff       	sbrs	r24, 6
 532:	fc cf       	rjmp	.-8      	; 0x52c <MCP23017_I2C_write+0x10>
	
	TWI0.MDATA = data;
 534:	40 93 08 09 	sts	0x0908, r20	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	
	//wait for data packet to be transmitted
	while(!(TWI0.MSTATUS & TWI_WIF_bm));
 538:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 53c:	86 ff       	sbrs	r24, 6
 53e:	fc cf       	rjmp	.-8      	; 0x538 <MCP23017_I2C_write+0x1c>
	
	//complete transaction by issuing a stop condition
	TWI0.MCTRLB = TWI_MCMD_gm;
 540:	83 e0       	ldi	r24, 0x03	; 3
 542:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
 546:	08 95       	ret

00000548 <MCP23017_I2C0_init>:
	
}

void  MCP23017_I2C0_init(void){
	//split into two 8 bit general purpose IO pins
	MCP23017_I2C_write(WRITE_opcode, IOCONaddr_b0, 0x80);
 548:	40 e8       	ldi	r20, 0x80	; 128
 54a:	6a e0       	ldi	r22, 0x0A	; 10
 54c:	80 e4       	ldi	r24, 0x40	; 64
 54e:	0e 94 8e 02 	call	0x51c	; 0x51c <MCP23017_I2C_write>
	//Set GPA as outputs
	MCP23017_I2C_write(WRITE_opcode, IODIRAaddr_b1, 0x00);
 552:	40 e0       	ldi	r20, 0x00	; 0
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	80 e4       	ldi	r24, 0x40	; 64
 558:	0e 94 8e 02 	call	0x51c	; 0x51c <MCP23017_I2C_write>
	//Set GPB as outputs
	MCP23017_I2C_write(WRITE_opcode, IODIRBaddr_b1, 0x00);
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	60 e1       	ldi	r22, 0x10	; 16
 560:	80 e4       	ldi	r24, 0x40	; 64
 562:	0e 94 8e 02 	call	0x51c	; 0x51c <MCP23017_I2C_write>
 566:	08 95       	ret

00000568 <I2C0_SCD40_init>:
	}
	else{
		return 1;
	}

}
 568:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
 56c:	e0 e0       	ldi	r30, 0x00	; 0
 56e:	f9 e0       	ldi	r31, 0x09	; 9
 570:	8f e0       	ldi	r24, 0x0F	; 15
 572:	86 83       	std	Z+6, r24	; 0x06
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	83 83       	std	Z+3, r24	; 0x03
 578:	85 83       	std	Z+5, r24	; 0x05
 57a:	08 95       	ret

0000057c <SCD40_WRITE_COMMAND>:
 57c:	24 ec       	ldi	r18, 0xC4	; 196
 57e:	20 93 07 09 	sts	0x0907, r18	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
 582:	20 91 05 09 	lds	r18, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 586:	26 ff       	sbrs	r18, 6
 588:	fc cf       	rjmp	.-8      	; 0x582 <SCD40_WRITE_COMMAND+0x6>
 58a:	90 93 08 09 	sts	0x0908, r25	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
 58e:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 592:	96 ff       	sbrs	r25, 6
 594:	fc cf       	rjmp	.-8      	; 0x58e <SCD40_WRITE_COMMAND+0x12>
 596:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
 59a:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 59e:	86 ff       	sbrs	r24, 6
 5a0:	fc cf       	rjmp	.-8      	; 0x59a <SCD40_WRITE_COMMAND+0x1e>
 5a2:	e0 e0       	ldi	r30, 0x00	; 0
 5a4:	f9 e0       	ldi	r31, 0x09	; 9
 5a6:	84 81       	ldd	r24, Z+4	; 0x04
 5a8:	83 60       	ori	r24, 0x03	; 3
 5aa:	84 83       	std	Z+4, r24	; 0x04
 5ac:	08 95       	ret

000005ae <SCD40_READ>:
 5ae:	ef e4       	ldi	r30, 0x4F	; 79
 5b0:	f3 ec       	ldi	r31, 0xC3	; 195
 5b2:	31 97       	sbiw	r30, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <SCD40_READ+0x4>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <SCD40_READ+0xa>
 5b8:	00 00       	nop
 5ba:	24 ec       	ldi	r18, 0xC4	; 196
 5bc:	20 93 07 09 	sts	0x0907, r18	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
 5c0:	20 91 05 09 	lds	r18, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 5c4:	26 ff       	sbrs	r18, 6
 5c6:	fc cf       	rjmp	.-8      	; 0x5c0 <SCD40_READ+0x12>
 5c8:	90 93 08 09 	sts	0x0908, r25	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
 5cc:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 5d0:	96 ff       	sbrs	r25, 6
 5d2:	fc cf       	rjmp	.-8      	; 0x5cc <SCD40_READ+0x1e>
 5d4:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
 5d8:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 5dc:	86 ff       	sbrs	r24, 6
 5de:	fc cf       	rjmp	.-8      	; 0x5d8 <SCD40_READ+0x2a>
 5e0:	87 ee       	ldi	r24, 0xE7	; 231
 5e2:	93 e0       	ldi	r25, 0x03	; 3
 5e4:	01 97       	sbiw	r24, 0x01	; 1
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <SCD40_READ+0x36>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <SCD40_READ+0x3c>
 5ea:	00 00       	nop
 5ec:	85 ec       	ldi	r24, 0xC5	; 197
 5ee:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
 5f2:	61 50       	subi	r22, 0x01	; 1
 5f4:	12 c0       	rjmp	.+36     	; 0x61a <SCD40_READ+0x6c>
 5f6:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 5fa:	88 23       	and	r24, r24
 5fc:	e4 f7       	brge	.-8      	; 0x5f6 <SCD40_READ+0x48>
 5fe:	e6 2f       	mov	r30, r22
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	e4 5a       	subi	r30, 0xA4	; 164
 604:	ff 4b       	sbci	r31, 0xBF	; 191
 606:	a0 e0       	ldi	r26, 0x00	; 0
 608:	b9 e0       	ldi	r27, 0x09	; 9
 60a:	18 96       	adiw	r26, 0x08	; 8
 60c:	8c 91       	ld	r24, X
 60e:	18 97       	sbiw	r26, 0x08	; 8
 610:	80 83       	st	Z, r24
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	14 96       	adiw	r26, 0x04	; 4
 616:	8c 93       	st	X, r24
 618:	6f 5f       	subi	r22, 0xFF	; 255
 61a:	61 11       	cpse	r22, r1
 61c:	ec cf       	rjmp	.-40     	; 0x5f6 <SCD40_READ+0x48>
 61e:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 622:	88 23       	and	r24, r24
 624:	e4 f7       	brge	.-8      	; 0x61e <SCD40_READ+0x70>
 626:	e0 e0       	ldi	r30, 0x00	; 0
 628:	f9 e0       	ldi	r31, 0x09	; 9
 62a:	80 85       	ldd	r24, Z+8	; 0x08
 62c:	80 93 5c 40 	sts	0x405C, r24	; 0x80405c <data>
 630:	87 e0       	ldi	r24, 0x07	; 7
 632:	84 83       	std	Z+4, r24	; 0x04
 634:	8c e5       	ldi	r24, 0x5C	; 92
 636:	90 e4       	ldi	r25, 0x40	; 64
 638:	08 95       	ret

0000063a <SCD40_MEASUREMENT>:

void SCD40_MEASUREMENT(void){
	SCD40_WRITE_COMMAND(start_periodic_measurement);
 63a:	81 eb       	ldi	r24, 0xB1	; 177
 63c:	91 e2       	ldi	r25, 0x21	; 33
 63e:	0e 94 be 02 	call	0x57c	; 0x57c <SCD40_WRITE_COMMAND>

	//while(POLL_READY_STATUS()){};
	
	SCD40_READ(get_data_ready_status, 3);
 642:	63 e0       	ldi	r22, 0x03	; 3
 644:	88 eb       	ldi	r24, 0xB8	; 184
 646:	94 ee       	ldi	r25, 0xE4	; 228
 648:	0e 94 d7 02 	call	0x5ae	; 0x5ae <SCD40_READ>
	
	//if (!(READY[0] == 0x00 && ((int) (READY[1]) & (PIN0_bm | PIN1_bm | PIN2_bm) == 0x00))){
	if(READY[0] == 0x06){
 64c:	80 91 59 40 	lds	r24, 0x4059	; 0x804059 <READY>
 650:	86 30       	cpi	r24, 0x06	; 6
 652:	29 f4       	brne	.+10     	; 0x65e <SCD40_MEASUREMENT+0x24>
		SCD40_READ(read_measurement, 9);
 654:	69 e0       	ldi	r22, 0x09	; 9
 656:	85 e0       	ldi	r24, 0x05	; 5
 658:	9c ee       	ldi	r25, 0xEC	; 236
 65a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <SCD40_READ>
 65e:	08 95       	ret

00000660 <conversion>:
	}
}


void conversion(){
 660:	0f 93       	push	r16
 662:	1f 93       	push	r17
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
	uint32_t intermediate;
	
	//CO2
	result temp;
	
	temp.high = DATA[0];
 668:	e0 e5       	ldi	r30, 0x50	; 80
 66a:	f0 e4       	ldi	r31, 0x40	; 64
 66c:	80 81       	ld	r24, Z
	temp.low = DATA[1];
 66e:	91 81       	ldd	r25, Z+1	; 0x01
	
	result_final[0] = temp.merge;
 670:	c5 e6       	ldi	r28, 0x65	; 101
 672:	d0 e4       	ldi	r29, 0x40	; 64
 674:	98 83       	st	Y, r25
 676:	89 83       	std	Y+1, r24	; 0x01
	
	//Temperature
	
	temp.high = DATA[3];
	temp.low = DATA[4];
	intermediate = temp.merge;
 678:	84 81       	ldd	r24, Z+4	; 0x04
 67a:	93 81       	ldd	r25, Z+3	; 0x03
 67c:	a0 e0       	ldi	r26, 0x00	; 0
 67e:	b0 e0       	ldi	r27, 0x00	; 0
	
	intermediate = intermediate/ 16;
 680:	68 94       	set
 682:	13 f8       	bld	r1, 3
 684:	b6 95       	lsr	r27
 686:	a7 95       	ror	r26
 688:	97 95       	ror	r25
 68a:	87 95       	ror	r24
 68c:	16 94       	lsr	r1
 68e:	d1 f7       	brne	.-12     	; 0x684 <conversion+0x24>
	intermediate  = 5 * intermediate;
 690:	ac 01       	movw	r20, r24
 692:	bd 01       	movw	r22, r26
 694:	44 0f       	add	r20, r20
 696:	55 1f       	adc	r21, r21
 698:	66 1f       	adc	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	44 0f       	add	r20, r20
 69e:	55 1f       	adc	r21, r21
 6a0:	66 1f       	adc	r22, r22
 6a2:	77 1f       	adc	r23, r23
 6a4:	84 0f       	add	r24, r20
 6a6:	95 1f       	adc	r25, r21
 6a8:	a6 1f       	adc	r26, r22
 6aa:	b7 1f       	adc	r27, r23
	intermediate = intermediate/ 16;
 6ac:	68 94       	set
 6ae:	13 f8       	bld	r1, 3
 6b0:	b6 95       	lsr	r27
 6b2:	a7 95       	ror	r26
 6b4:	97 95       	ror	r25
 6b6:	87 95       	ror	r24
 6b8:	16 94       	lsr	r1
 6ba:	d1 f7       	brne	.-12     	; 0x6b0 <conversion+0x50>
	intermediate  = 5 * intermediate;
 6bc:	ac 01       	movw	r20, r24
 6be:	bd 01       	movw	r22, r26
 6c0:	44 0f       	add	r20, r20
 6c2:	55 1f       	adc	r21, r21
 6c4:	66 1f       	adc	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	44 0f       	add	r20, r20
 6ca:	55 1f       	adc	r21, r21
 6cc:	66 1f       	adc	r22, r22
 6ce:	77 1f       	adc	r23, r23
 6d0:	84 0f       	add	r24, r20
 6d2:	95 1f       	adc	r25, r21
 6d4:	a6 1f       	adc	r26, r22
 6d6:	b7 1f       	adc	r27, r23
	intermediate = intermediate/ 16;
 6d8:	68 94       	set
 6da:	13 f8       	bld	r1, 3
 6dc:	b6 95       	lsr	r27
 6de:	a7 95       	ror	r26
 6e0:	97 95       	ror	r25
 6e2:	87 95       	ror	r24
 6e4:	16 94       	lsr	r1
 6e6:	d1 f7       	brne	.-12     	; 0x6dc <conversion+0x7c>
	intermediate  = 7 * intermediate;
 6e8:	ac 01       	movw	r20, r24
 6ea:	bd 01       	movw	r22, r26
 6ec:	44 0f       	add	r20, r20
 6ee:	55 1f       	adc	r21, r21
 6f0:	66 1f       	adc	r22, r22
 6f2:	77 1f       	adc	r23, r23
 6f4:	44 0f       	add	r20, r20
 6f6:	55 1f       	adc	r21, r21
 6f8:	66 1f       	adc	r22, r22
 6fa:	77 1f       	adc	r23, r23
 6fc:	44 0f       	add	r20, r20
 6fe:	55 1f       	adc	r21, r21
 700:	66 1f       	adc	r22, r22
 702:	77 1f       	adc	r23, r23
 704:	8a 01       	movw	r16, r20
 706:	9b 01       	movw	r18, r22
 708:	08 1b       	sub	r16, r24
 70a:	19 0b       	sbc	r17, r25
 70c:	2a 0b       	sbc	r18, r26
 70e:	3b 0b       	sbc	r19, r27
 710:	d9 01       	movw	r26, r18
 712:	c8 01       	movw	r24, r16
	intermediate = intermediate/ 16;
 714:	68 94       	set
 716:	13 f8       	bld	r1, 3
 718:	b6 95       	lsr	r27
 71a:	a7 95       	ror	r26
 71c:	97 95       	ror	r25
 71e:	87 95       	ror	r24
 720:	16 94       	lsr	r1
 722:	d1 f7       	brne	.-12     	; 0x718 <conversion+0xb8>
	intermediate -= 45;
 724:	8d 97       	sbiw	r24, 0x2d	; 45
 726:	a1 09       	sbc	r26, r1
 728:	b1 09       	sbc	r27, r1
	
	result_final[1] = intermediate;
 72a:	8a 83       	std	Y+2, r24	; 0x02
 72c:	9b 83       	std	Y+3, r25	; 0x03
	//Relative humidity
	
	temp.high = DATA[7];
	temp.low = DATA[8];
	
	intermediate = temp.merge;
 72e:	80 85       	ldd	r24, Z+8	; 0x08
 730:	97 81       	ldd	r25, Z+7	; 0x07
 732:	a0 e0       	ldi	r26, 0x00	; 0
 734:	b0 e0       	ldi	r27, 0x00	; 0
	
	intermediate = intermediate/ 16;
 736:	68 94       	set
 738:	13 f8       	bld	r1, 3
 73a:	b6 95       	lsr	r27
 73c:	a7 95       	ror	r26
 73e:	97 95       	ror	r25
 740:	87 95       	ror	r24
 742:	16 94       	lsr	r1
 744:	d1 f7       	brne	.-12     	; 0x73a <conversion+0xda>
	intermediate *= 10;
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	aa 1f       	adc	r26, r26
 74c:	bb 1f       	adc	r27, r27
 74e:	ac 01       	movw	r20, r24
 750:	bd 01       	movw	r22, r26
 752:	44 0f       	add	r20, r20
 754:	55 1f       	adc	r21, r21
 756:	66 1f       	adc	r22, r22
 758:	77 1f       	adc	r23, r23
 75a:	44 0f       	add	r20, r20
 75c:	55 1f       	adc	r21, r21
 75e:	66 1f       	adc	r22, r22
 760:	77 1f       	adc	r23, r23
 762:	84 0f       	add	r24, r20
 764:	95 1f       	adc	r25, r21
 766:	a6 1f       	adc	r26, r22
 768:	b7 1f       	adc	r27, r23
	intermediate /= 16;
 76a:	68 94       	set
 76c:	13 f8       	bld	r1, 3
 76e:	b6 95       	lsr	r27
 770:	a7 95       	ror	r26
 772:	97 95       	ror	r25
 774:	87 95       	ror	r24
 776:	16 94       	lsr	r1
 778:	d1 f7       	brne	.-12     	; 0x76e <conversion+0x10e>
	intermediate *= 10;
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	aa 1f       	adc	r26, r26
 780:	bb 1f       	adc	r27, r27
 782:	ac 01       	movw	r20, r24
 784:	bd 01       	movw	r22, r26
 786:	44 0f       	add	r20, r20
 788:	55 1f       	adc	r21, r21
 78a:	66 1f       	adc	r22, r22
 78c:	77 1f       	adc	r23, r23
 78e:	44 0f       	add	r20, r20
 790:	55 1f       	adc	r21, r21
 792:	66 1f       	adc	r22, r22
 794:	77 1f       	adc	r23, r23
 796:	84 0f       	add	r24, r20
 798:	95 1f       	adc	r25, r21
 79a:	a6 1f       	adc	r26, r22
 79c:	b7 1f       	adc	r27, r23
	intermediate /= 16;
	intermediate /= 16;
 79e:	89 2f       	mov	r24, r25
 7a0:	9a 2f       	mov	r25, r26
 7a2:	ab 2f       	mov	r26, r27
 7a4:	bb 27       	eor	r27, r27
	
	
	result_final[2] = intermediate;
 7a6:	8c 83       	std	Y+4, r24	; 0x04
 7a8:	9d 83       	std	Y+5, r25	; 0x05

}
 7aa:	df 91       	pop	r29
 7ac:	cf 91       	pop	r28
 7ae:	1f 91       	pop	r17
 7b0:	0f 91       	pop	r16
 7b2:	08 95       	ret

000007b4 <UART_init>:
//////////////////////USART3 driver functions///////////////////////

/* Initialize USART */
void UART_init(uint16_t baud, uint8_t data, unsigned char parity){
	//setting the Baud rate
	USART3.BAUD = 1667;
 7b4:	83 e8       	ldi	r24, 0x83	; 131
 7b6:	96 e0       	ldi	r25, 0x06	; 6
 7b8:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7e0868>
 7bc:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7e0869>
	
	
	if(parity == 'E'){
 7c0:	45 34       	cpi	r20, 0x45	; 69
 7c2:	29 f4       	brne	.+10     	; 0x7ce <UART_init+0x1a>
		//Asynchronous mode, 0 - 8 bit data, no stop bit, 1 stop bit,  even parity
		USART3.CTRLC =  USART_CMODE_ASYNCHRONOUS_gc | (data - 5) | USART_PMODE_EVEN_gc  |USART_SBMODE_1BIT_gc;
 7c4:	65 50       	subi	r22, 0x05	; 5
 7c6:	60 62       	ori	r22, 0x20	; 32
 7c8:	60 93 67 08 	sts	0x0867, r22	; 0x800867 <__TEXT_REGION_LENGTH__+0x7e0867>
 7cc:	0a c0       	rjmp	.+20     	; 0x7e2 <UART_init+0x2e>
	}
	else if(parity == 'O'){
 7ce:	4f 34       	cpi	r20, 0x4F	; 79
 7d0:	29 f4       	brne	.+10     	; 0x7dc <UART_init+0x28>
		//Asynchronous mode, 0 - 8 bit data, no stop bit, 1 stop bit,  odd parity
		USART3.CTRLC =  USART_CMODE_ASYNCHRONOUS_gc | (data - 5) | USART_PMODE_ODD_gc  |USART_SBMODE_1BIT_gc;
 7d2:	65 50       	subi	r22, 0x05	; 5
 7d4:	60 63       	ori	r22, 0x30	; 48
 7d6:	60 93 67 08 	sts	0x0867, r22	; 0x800867 <__TEXT_REGION_LENGTH__+0x7e0867>
 7da:	03 c0       	rjmp	.+6      	; 0x7e2 <UART_init+0x2e>
	}
	else{
		//Asynchronous mode, 0 - 8 bit data, no stop bit, 1 stop bit,  no parity
		USART3.CTRLC =  USART_CMODE_ASYNCHRONOUS_gc | (data - 5) | USART_PMODE_DISABLED_gc  |USART_SBMODE_1BIT_gc;
 7dc:	65 50       	subi	r22, 0x05	; 5
 7de:	60 93 67 08 	sts	0x0867, r22	; 0x800867 <__TEXT_REGION_LENGTH__+0x7e0867>
	}
	
	//configuring the TXD pin as an output
	PORTB.DIR = PIN0_bm;
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x7e0420>
		
	//Normal mode and enable transmit
	USART3.CTRLB =  USART_RXMODE_NORMAL_gc |  USART_TXEN_bm;
 7e8:	80 e4       	ldi	r24, 0x40	; 64
 7ea:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x7e0866>
 7ee:	08 95       	ret

000007f0 <UART_SendChar>:
	
}

void UART_SendChar(char c){
	while(!(USART3.STATUS & USART_DREIF_bm)){};
 7f0:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 7f4:	95 ff       	sbrs	r25, 5
 7f6:	fc cf       	rjmp	.-8      	; 0x7f0 <UART_SendChar>
	USART3.TXDATAL = c;
 7f8:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 7fc:	08 95       	ret

000007fe <sprintf>:
 7fe:	0f 93       	push	r16
 800:	1f 93       	push	r17
 802:	cf 93       	push	r28
 804:	df 93       	push	r29
 806:	cd b7       	in	r28, 0x3d	; 61
 808:	de b7       	in	r29, 0x3e	; 62
 80a:	2e 97       	sbiw	r28, 0x0e	; 14
 80c:	cd bf       	out	0x3d, r28	; 61
 80e:	de bf       	out	0x3e, r29	; 62
 810:	0d 89       	ldd	r16, Y+21	; 0x15
 812:	1e 89       	ldd	r17, Y+22	; 0x16
 814:	86 e0       	ldi	r24, 0x06	; 6
 816:	8c 83       	std	Y+4, r24	; 0x04
 818:	09 83       	std	Y+1, r16	; 0x01
 81a:	1a 83       	std	Y+2, r17	; 0x02
 81c:	8f ef       	ldi	r24, 0xFF	; 255
 81e:	9f e7       	ldi	r25, 0x7F	; 127
 820:	8d 83       	std	Y+5, r24	; 0x05
 822:	9e 83       	std	Y+6, r25	; 0x06
 824:	ae 01       	movw	r20, r28
 826:	47 5e       	subi	r20, 0xE7	; 231
 828:	5f 4f       	sbci	r21, 0xFF	; 255
 82a:	6f 89       	ldd	r22, Y+23	; 0x17
 82c:	78 8d       	ldd	r23, Y+24	; 0x18
 82e:	ce 01       	movw	r24, r28
 830:	01 96       	adiw	r24, 0x01	; 1
 832:	0e 94 28 04 	call	0x850	; 0x850 <vfprintf>
 836:	ef 81       	ldd	r30, Y+7	; 0x07
 838:	f8 85       	ldd	r31, Y+8	; 0x08
 83a:	e0 0f       	add	r30, r16
 83c:	f1 1f       	adc	r31, r17
 83e:	10 82       	st	Z, r1
 840:	2e 96       	adiw	r28, 0x0e	; 14
 842:	cd bf       	out	0x3d, r28	; 61
 844:	de bf       	out	0x3e, r29	; 62
 846:	df 91       	pop	r29
 848:	cf 91       	pop	r28
 84a:	1f 91       	pop	r17
 84c:	0f 91       	pop	r16
 84e:	08 95       	ret

00000850 <vfprintf>:
 850:	2f 92       	push	r2
 852:	3f 92       	push	r3
 854:	4f 92       	push	r4
 856:	5f 92       	push	r5
 858:	6f 92       	push	r6
 85a:	7f 92       	push	r7
 85c:	8f 92       	push	r8
 85e:	9f 92       	push	r9
 860:	af 92       	push	r10
 862:	bf 92       	push	r11
 864:	cf 92       	push	r12
 866:	df 92       	push	r13
 868:	ef 92       	push	r14
 86a:	ff 92       	push	r15
 86c:	0f 93       	push	r16
 86e:	1f 93       	push	r17
 870:	cf 93       	push	r28
 872:	df 93       	push	r29
 874:	cd b7       	in	r28, 0x3d	; 61
 876:	de b7       	in	r29, 0x3e	; 62
 878:	2b 97       	sbiw	r28, 0x0b	; 11
 87a:	cd bf       	out	0x3d, r28	; 61
 87c:	de bf       	out	0x3e, r29	; 62
 87e:	6c 01       	movw	r12, r24
 880:	7b 01       	movw	r14, r22
 882:	8a 01       	movw	r16, r20
 884:	fc 01       	movw	r30, r24
 886:	16 82       	std	Z+6, r1	; 0x06
 888:	17 82       	std	Z+7, r1	; 0x07
 88a:	83 81       	ldd	r24, Z+3	; 0x03
 88c:	81 ff       	sbrs	r24, 1
 88e:	cc c1       	rjmp	.+920    	; 0xc28 <vfprintf+0x3d8>
 890:	ce 01       	movw	r24, r28
 892:	01 96       	adiw	r24, 0x01	; 1
 894:	3c 01       	movw	r6, r24
 896:	f6 01       	movw	r30, r12
 898:	93 81       	ldd	r25, Z+3	; 0x03
 89a:	f7 01       	movw	r30, r14
 89c:	93 fd       	sbrc	r25, 3
 89e:	85 91       	lpm	r24, Z+
 8a0:	93 ff       	sbrs	r25, 3
 8a2:	81 91       	ld	r24, Z+
 8a4:	7f 01       	movw	r14, r30
 8a6:	88 23       	and	r24, r24
 8a8:	09 f4       	brne	.+2      	; 0x8ac <vfprintf+0x5c>
 8aa:	ba c1       	rjmp	.+884    	; 0xc20 <vfprintf+0x3d0>
 8ac:	85 32       	cpi	r24, 0x25	; 37
 8ae:	39 f4       	brne	.+14     	; 0x8be <vfprintf+0x6e>
 8b0:	93 fd       	sbrc	r25, 3
 8b2:	85 91       	lpm	r24, Z+
 8b4:	93 ff       	sbrs	r25, 3
 8b6:	81 91       	ld	r24, Z+
 8b8:	7f 01       	movw	r14, r30
 8ba:	85 32       	cpi	r24, 0x25	; 37
 8bc:	29 f4       	brne	.+10     	; 0x8c8 <vfprintf+0x78>
 8be:	b6 01       	movw	r22, r12
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 8c6:	e7 cf       	rjmp	.-50     	; 0x896 <vfprintf+0x46>
 8c8:	91 2c       	mov	r9, r1
 8ca:	21 2c       	mov	r2, r1
 8cc:	31 2c       	mov	r3, r1
 8ce:	ff e1       	ldi	r31, 0x1F	; 31
 8d0:	f3 15       	cp	r31, r3
 8d2:	d8 f0       	brcs	.+54     	; 0x90a <vfprintf+0xba>
 8d4:	8b 32       	cpi	r24, 0x2B	; 43
 8d6:	79 f0       	breq	.+30     	; 0x8f6 <vfprintf+0xa6>
 8d8:	38 f4       	brcc	.+14     	; 0x8e8 <vfprintf+0x98>
 8da:	80 32       	cpi	r24, 0x20	; 32
 8dc:	79 f0       	breq	.+30     	; 0x8fc <vfprintf+0xac>
 8de:	83 32       	cpi	r24, 0x23	; 35
 8e0:	a1 f4       	brne	.+40     	; 0x90a <vfprintf+0xba>
 8e2:	23 2d       	mov	r18, r3
 8e4:	20 61       	ori	r18, 0x10	; 16
 8e6:	1d c0       	rjmp	.+58     	; 0x922 <vfprintf+0xd2>
 8e8:	8d 32       	cpi	r24, 0x2D	; 45
 8ea:	61 f0       	breq	.+24     	; 0x904 <vfprintf+0xb4>
 8ec:	80 33       	cpi	r24, 0x30	; 48
 8ee:	69 f4       	brne	.+26     	; 0x90a <vfprintf+0xba>
 8f0:	23 2d       	mov	r18, r3
 8f2:	21 60       	ori	r18, 0x01	; 1
 8f4:	16 c0       	rjmp	.+44     	; 0x922 <vfprintf+0xd2>
 8f6:	83 2d       	mov	r24, r3
 8f8:	82 60       	ori	r24, 0x02	; 2
 8fa:	38 2e       	mov	r3, r24
 8fc:	e3 2d       	mov	r30, r3
 8fe:	e4 60       	ori	r30, 0x04	; 4
 900:	3e 2e       	mov	r3, r30
 902:	2a c0       	rjmp	.+84     	; 0x958 <vfprintf+0x108>
 904:	f3 2d       	mov	r31, r3
 906:	f8 60       	ori	r31, 0x08	; 8
 908:	1d c0       	rjmp	.+58     	; 0x944 <vfprintf+0xf4>
 90a:	37 fc       	sbrc	r3, 7
 90c:	2d c0       	rjmp	.+90     	; 0x968 <vfprintf+0x118>
 90e:	20 ed       	ldi	r18, 0xD0	; 208
 910:	28 0f       	add	r18, r24
 912:	2a 30       	cpi	r18, 0x0A	; 10
 914:	40 f0       	brcs	.+16     	; 0x926 <vfprintf+0xd6>
 916:	8e 32       	cpi	r24, 0x2E	; 46
 918:	b9 f4       	brne	.+46     	; 0x948 <vfprintf+0xf8>
 91a:	36 fc       	sbrc	r3, 6
 91c:	81 c1       	rjmp	.+770    	; 0xc20 <vfprintf+0x3d0>
 91e:	23 2d       	mov	r18, r3
 920:	20 64       	ori	r18, 0x40	; 64
 922:	32 2e       	mov	r3, r18
 924:	19 c0       	rjmp	.+50     	; 0x958 <vfprintf+0x108>
 926:	36 fe       	sbrs	r3, 6
 928:	06 c0       	rjmp	.+12     	; 0x936 <vfprintf+0xe6>
 92a:	8a e0       	ldi	r24, 0x0A	; 10
 92c:	98 9e       	mul	r9, r24
 92e:	20 0d       	add	r18, r0
 930:	11 24       	eor	r1, r1
 932:	92 2e       	mov	r9, r18
 934:	11 c0       	rjmp	.+34     	; 0x958 <vfprintf+0x108>
 936:	ea e0       	ldi	r30, 0x0A	; 10
 938:	2e 9e       	mul	r2, r30
 93a:	20 0d       	add	r18, r0
 93c:	11 24       	eor	r1, r1
 93e:	22 2e       	mov	r2, r18
 940:	f3 2d       	mov	r31, r3
 942:	f0 62       	ori	r31, 0x20	; 32
 944:	3f 2e       	mov	r3, r31
 946:	08 c0       	rjmp	.+16     	; 0x958 <vfprintf+0x108>
 948:	8c 36       	cpi	r24, 0x6C	; 108
 94a:	21 f4       	brne	.+8      	; 0x954 <vfprintf+0x104>
 94c:	83 2d       	mov	r24, r3
 94e:	80 68       	ori	r24, 0x80	; 128
 950:	38 2e       	mov	r3, r24
 952:	02 c0       	rjmp	.+4      	; 0x958 <vfprintf+0x108>
 954:	88 36       	cpi	r24, 0x68	; 104
 956:	41 f4       	brne	.+16     	; 0x968 <vfprintf+0x118>
 958:	f7 01       	movw	r30, r14
 95a:	93 fd       	sbrc	r25, 3
 95c:	85 91       	lpm	r24, Z+
 95e:	93 ff       	sbrs	r25, 3
 960:	81 91       	ld	r24, Z+
 962:	7f 01       	movw	r14, r30
 964:	81 11       	cpse	r24, r1
 966:	b3 cf       	rjmp	.-154    	; 0x8ce <vfprintf+0x7e>
 968:	98 2f       	mov	r25, r24
 96a:	9f 7d       	andi	r25, 0xDF	; 223
 96c:	95 54       	subi	r25, 0x45	; 69
 96e:	93 30       	cpi	r25, 0x03	; 3
 970:	28 f4       	brcc	.+10     	; 0x97c <vfprintf+0x12c>
 972:	0c 5f       	subi	r16, 0xFC	; 252
 974:	1f 4f       	sbci	r17, 0xFF	; 255
 976:	9f e3       	ldi	r25, 0x3F	; 63
 978:	99 83       	std	Y+1, r25	; 0x01
 97a:	0d c0       	rjmp	.+26     	; 0x996 <vfprintf+0x146>
 97c:	83 36       	cpi	r24, 0x63	; 99
 97e:	31 f0       	breq	.+12     	; 0x98c <vfprintf+0x13c>
 980:	83 37       	cpi	r24, 0x73	; 115
 982:	71 f0       	breq	.+28     	; 0x9a0 <vfprintf+0x150>
 984:	83 35       	cpi	r24, 0x53	; 83
 986:	09 f0       	breq	.+2      	; 0x98a <vfprintf+0x13a>
 988:	59 c0       	rjmp	.+178    	; 0xa3c <vfprintf+0x1ec>
 98a:	21 c0       	rjmp	.+66     	; 0x9ce <vfprintf+0x17e>
 98c:	f8 01       	movw	r30, r16
 98e:	80 81       	ld	r24, Z
 990:	89 83       	std	Y+1, r24	; 0x01
 992:	0e 5f       	subi	r16, 0xFE	; 254
 994:	1f 4f       	sbci	r17, 0xFF	; 255
 996:	88 24       	eor	r8, r8
 998:	83 94       	inc	r8
 99a:	91 2c       	mov	r9, r1
 99c:	53 01       	movw	r10, r6
 99e:	13 c0       	rjmp	.+38     	; 0x9c6 <vfprintf+0x176>
 9a0:	28 01       	movw	r4, r16
 9a2:	f2 e0       	ldi	r31, 0x02	; 2
 9a4:	4f 0e       	add	r4, r31
 9a6:	51 1c       	adc	r5, r1
 9a8:	f8 01       	movw	r30, r16
 9aa:	a0 80       	ld	r10, Z
 9ac:	b1 80       	ldd	r11, Z+1	; 0x01
 9ae:	36 fe       	sbrs	r3, 6
 9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <vfprintf+0x168>
 9b2:	69 2d       	mov	r22, r9
 9b4:	70 e0       	ldi	r23, 0x00	; 0
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <vfprintf+0x16c>
 9b8:	6f ef       	ldi	r22, 0xFF	; 255
 9ba:	7f ef       	ldi	r23, 0xFF	; 255
 9bc:	c5 01       	movw	r24, r10
 9be:	0e 94 37 06 	call	0xc6e	; 0xc6e <strnlen>
 9c2:	4c 01       	movw	r8, r24
 9c4:	82 01       	movw	r16, r4
 9c6:	f3 2d       	mov	r31, r3
 9c8:	ff 77       	andi	r31, 0x7F	; 127
 9ca:	3f 2e       	mov	r3, r31
 9cc:	16 c0       	rjmp	.+44     	; 0x9fa <vfprintf+0x1aa>
 9ce:	28 01       	movw	r4, r16
 9d0:	22 e0       	ldi	r18, 0x02	; 2
 9d2:	42 0e       	add	r4, r18
 9d4:	51 1c       	adc	r5, r1
 9d6:	f8 01       	movw	r30, r16
 9d8:	a0 80       	ld	r10, Z
 9da:	b1 80       	ldd	r11, Z+1	; 0x01
 9dc:	36 fe       	sbrs	r3, 6
 9de:	03 c0       	rjmp	.+6      	; 0x9e6 <vfprintf+0x196>
 9e0:	69 2d       	mov	r22, r9
 9e2:	70 e0       	ldi	r23, 0x00	; 0
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <vfprintf+0x19a>
 9e6:	6f ef       	ldi	r22, 0xFF	; 255
 9e8:	7f ef       	ldi	r23, 0xFF	; 255
 9ea:	c5 01       	movw	r24, r10
 9ec:	0e 94 2c 06 	call	0xc58	; 0xc58 <strnlen_P>
 9f0:	4c 01       	movw	r8, r24
 9f2:	f3 2d       	mov	r31, r3
 9f4:	f0 68       	ori	r31, 0x80	; 128
 9f6:	3f 2e       	mov	r3, r31
 9f8:	82 01       	movw	r16, r4
 9fa:	33 fc       	sbrc	r3, 3
 9fc:	1b c0       	rjmp	.+54     	; 0xa34 <vfprintf+0x1e4>
 9fe:	82 2d       	mov	r24, r2
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	88 16       	cp	r8, r24
 a04:	99 06       	cpc	r9, r25
 a06:	b0 f4       	brcc	.+44     	; 0xa34 <vfprintf+0x1e4>
 a08:	b6 01       	movw	r22, r12
 a0a:	80 e2       	ldi	r24, 0x20	; 32
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 a12:	2a 94       	dec	r2
 a14:	f4 cf       	rjmp	.-24     	; 0x9fe <vfprintf+0x1ae>
 a16:	f5 01       	movw	r30, r10
 a18:	37 fc       	sbrc	r3, 7
 a1a:	85 91       	lpm	r24, Z+
 a1c:	37 fe       	sbrs	r3, 7
 a1e:	81 91       	ld	r24, Z+
 a20:	5f 01       	movw	r10, r30
 a22:	b6 01       	movw	r22, r12
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 a2a:	21 10       	cpse	r2, r1
 a2c:	2a 94       	dec	r2
 a2e:	21 e0       	ldi	r18, 0x01	; 1
 a30:	82 1a       	sub	r8, r18
 a32:	91 08       	sbc	r9, r1
 a34:	81 14       	cp	r8, r1
 a36:	91 04       	cpc	r9, r1
 a38:	71 f7       	brne	.-36     	; 0xa16 <vfprintf+0x1c6>
 a3a:	e8 c0       	rjmp	.+464    	; 0xc0c <vfprintf+0x3bc>
 a3c:	84 36       	cpi	r24, 0x64	; 100
 a3e:	11 f0       	breq	.+4      	; 0xa44 <vfprintf+0x1f4>
 a40:	89 36       	cpi	r24, 0x69	; 105
 a42:	41 f5       	brne	.+80     	; 0xa94 <vfprintf+0x244>
 a44:	f8 01       	movw	r30, r16
 a46:	37 fe       	sbrs	r3, 7
 a48:	07 c0       	rjmp	.+14     	; 0xa58 <vfprintf+0x208>
 a4a:	60 81       	ld	r22, Z
 a4c:	71 81       	ldd	r23, Z+1	; 0x01
 a4e:	82 81       	ldd	r24, Z+2	; 0x02
 a50:	93 81       	ldd	r25, Z+3	; 0x03
 a52:	0c 5f       	subi	r16, 0xFC	; 252
 a54:	1f 4f       	sbci	r17, 0xFF	; 255
 a56:	08 c0       	rjmp	.+16     	; 0xa68 <vfprintf+0x218>
 a58:	60 81       	ld	r22, Z
 a5a:	71 81       	ldd	r23, Z+1	; 0x01
 a5c:	07 2e       	mov	r0, r23
 a5e:	00 0c       	add	r0, r0
 a60:	88 0b       	sbc	r24, r24
 a62:	99 0b       	sbc	r25, r25
 a64:	0e 5f       	subi	r16, 0xFE	; 254
 a66:	1f 4f       	sbci	r17, 0xFF	; 255
 a68:	f3 2d       	mov	r31, r3
 a6a:	ff 76       	andi	r31, 0x6F	; 111
 a6c:	3f 2e       	mov	r3, r31
 a6e:	97 ff       	sbrs	r25, 7
 a70:	09 c0       	rjmp	.+18     	; 0xa84 <vfprintf+0x234>
 a72:	90 95       	com	r25
 a74:	80 95       	com	r24
 a76:	70 95       	com	r23
 a78:	61 95       	neg	r22
 a7a:	7f 4f       	sbci	r23, 0xFF	; 255
 a7c:	8f 4f       	sbci	r24, 0xFF	; 255
 a7e:	9f 4f       	sbci	r25, 0xFF	; 255
 a80:	f0 68       	ori	r31, 0x80	; 128
 a82:	3f 2e       	mov	r3, r31
 a84:	2a e0       	ldi	r18, 0x0A	; 10
 a86:	30 e0       	ldi	r19, 0x00	; 0
 a88:	a3 01       	movw	r20, r6
 a8a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__ultoa_invert>
 a8e:	88 2e       	mov	r8, r24
 a90:	86 18       	sub	r8, r6
 a92:	45 c0       	rjmp	.+138    	; 0xb1e <vfprintf+0x2ce>
 a94:	85 37       	cpi	r24, 0x75	; 117
 a96:	31 f4       	brne	.+12     	; 0xaa4 <vfprintf+0x254>
 a98:	23 2d       	mov	r18, r3
 a9a:	2f 7e       	andi	r18, 0xEF	; 239
 a9c:	b2 2e       	mov	r11, r18
 a9e:	2a e0       	ldi	r18, 0x0A	; 10
 aa0:	30 e0       	ldi	r19, 0x00	; 0
 aa2:	25 c0       	rjmp	.+74     	; 0xaee <vfprintf+0x29e>
 aa4:	93 2d       	mov	r25, r3
 aa6:	99 7f       	andi	r25, 0xF9	; 249
 aa8:	b9 2e       	mov	r11, r25
 aaa:	8f 36       	cpi	r24, 0x6F	; 111
 aac:	c1 f0       	breq	.+48     	; 0xade <vfprintf+0x28e>
 aae:	18 f4       	brcc	.+6      	; 0xab6 <vfprintf+0x266>
 ab0:	88 35       	cpi	r24, 0x58	; 88
 ab2:	79 f0       	breq	.+30     	; 0xad2 <vfprintf+0x282>
 ab4:	b5 c0       	rjmp	.+362    	; 0xc20 <vfprintf+0x3d0>
 ab6:	80 37       	cpi	r24, 0x70	; 112
 ab8:	19 f0       	breq	.+6      	; 0xac0 <vfprintf+0x270>
 aba:	88 37       	cpi	r24, 0x78	; 120
 abc:	21 f0       	breq	.+8      	; 0xac6 <vfprintf+0x276>
 abe:	b0 c0       	rjmp	.+352    	; 0xc20 <vfprintf+0x3d0>
 ac0:	e9 2f       	mov	r30, r25
 ac2:	e0 61       	ori	r30, 0x10	; 16
 ac4:	be 2e       	mov	r11, r30
 ac6:	b4 fe       	sbrs	r11, 4
 ac8:	0d c0       	rjmp	.+26     	; 0xae4 <vfprintf+0x294>
 aca:	fb 2d       	mov	r31, r11
 acc:	f4 60       	ori	r31, 0x04	; 4
 ace:	bf 2e       	mov	r11, r31
 ad0:	09 c0       	rjmp	.+18     	; 0xae4 <vfprintf+0x294>
 ad2:	34 fe       	sbrs	r3, 4
 ad4:	0a c0       	rjmp	.+20     	; 0xaea <vfprintf+0x29a>
 ad6:	29 2f       	mov	r18, r25
 ad8:	26 60       	ori	r18, 0x06	; 6
 ada:	b2 2e       	mov	r11, r18
 adc:	06 c0       	rjmp	.+12     	; 0xaea <vfprintf+0x29a>
 ade:	28 e0       	ldi	r18, 0x08	; 8
 ae0:	30 e0       	ldi	r19, 0x00	; 0
 ae2:	05 c0       	rjmp	.+10     	; 0xaee <vfprintf+0x29e>
 ae4:	20 e1       	ldi	r18, 0x10	; 16
 ae6:	30 e0       	ldi	r19, 0x00	; 0
 ae8:	02 c0       	rjmp	.+4      	; 0xaee <vfprintf+0x29e>
 aea:	20 e1       	ldi	r18, 0x10	; 16
 aec:	32 e0       	ldi	r19, 0x02	; 2
 aee:	f8 01       	movw	r30, r16
 af0:	b7 fe       	sbrs	r11, 7
 af2:	07 c0       	rjmp	.+14     	; 0xb02 <vfprintf+0x2b2>
 af4:	60 81       	ld	r22, Z
 af6:	71 81       	ldd	r23, Z+1	; 0x01
 af8:	82 81       	ldd	r24, Z+2	; 0x02
 afa:	93 81       	ldd	r25, Z+3	; 0x03
 afc:	0c 5f       	subi	r16, 0xFC	; 252
 afe:	1f 4f       	sbci	r17, 0xFF	; 255
 b00:	06 c0       	rjmp	.+12     	; 0xb0e <vfprintf+0x2be>
 b02:	60 81       	ld	r22, Z
 b04:	71 81       	ldd	r23, Z+1	; 0x01
 b06:	80 e0       	ldi	r24, 0x00	; 0
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	0e 5f       	subi	r16, 0xFE	; 254
 b0c:	1f 4f       	sbci	r17, 0xFF	; 255
 b0e:	a3 01       	movw	r20, r6
 b10:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__ultoa_invert>
 b14:	88 2e       	mov	r8, r24
 b16:	86 18       	sub	r8, r6
 b18:	fb 2d       	mov	r31, r11
 b1a:	ff 77       	andi	r31, 0x7F	; 127
 b1c:	3f 2e       	mov	r3, r31
 b1e:	36 fe       	sbrs	r3, 6
 b20:	0d c0       	rjmp	.+26     	; 0xb3c <vfprintf+0x2ec>
 b22:	23 2d       	mov	r18, r3
 b24:	2e 7f       	andi	r18, 0xFE	; 254
 b26:	a2 2e       	mov	r10, r18
 b28:	89 14       	cp	r8, r9
 b2a:	58 f4       	brcc	.+22     	; 0xb42 <vfprintf+0x2f2>
 b2c:	34 fe       	sbrs	r3, 4
 b2e:	0b c0       	rjmp	.+22     	; 0xb46 <vfprintf+0x2f6>
 b30:	32 fc       	sbrc	r3, 2
 b32:	09 c0       	rjmp	.+18     	; 0xb46 <vfprintf+0x2f6>
 b34:	83 2d       	mov	r24, r3
 b36:	8e 7e       	andi	r24, 0xEE	; 238
 b38:	a8 2e       	mov	r10, r24
 b3a:	05 c0       	rjmp	.+10     	; 0xb46 <vfprintf+0x2f6>
 b3c:	b8 2c       	mov	r11, r8
 b3e:	a3 2c       	mov	r10, r3
 b40:	03 c0       	rjmp	.+6      	; 0xb48 <vfprintf+0x2f8>
 b42:	b8 2c       	mov	r11, r8
 b44:	01 c0       	rjmp	.+2      	; 0xb48 <vfprintf+0x2f8>
 b46:	b9 2c       	mov	r11, r9
 b48:	a4 fe       	sbrs	r10, 4
 b4a:	0f c0       	rjmp	.+30     	; 0xb6a <vfprintf+0x31a>
 b4c:	fe 01       	movw	r30, r28
 b4e:	e8 0d       	add	r30, r8
 b50:	f1 1d       	adc	r31, r1
 b52:	80 81       	ld	r24, Z
 b54:	80 33       	cpi	r24, 0x30	; 48
 b56:	21 f4       	brne	.+8      	; 0xb60 <vfprintf+0x310>
 b58:	9a 2d       	mov	r25, r10
 b5a:	99 7e       	andi	r25, 0xE9	; 233
 b5c:	a9 2e       	mov	r10, r25
 b5e:	09 c0       	rjmp	.+18     	; 0xb72 <vfprintf+0x322>
 b60:	a2 fe       	sbrs	r10, 2
 b62:	06 c0       	rjmp	.+12     	; 0xb70 <vfprintf+0x320>
 b64:	b3 94       	inc	r11
 b66:	b3 94       	inc	r11
 b68:	04 c0       	rjmp	.+8      	; 0xb72 <vfprintf+0x322>
 b6a:	8a 2d       	mov	r24, r10
 b6c:	86 78       	andi	r24, 0x86	; 134
 b6e:	09 f0       	breq	.+2      	; 0xb72 <vfprintf+0x322>
 b70:	b3 94       	inc	r11
 b72:	a3 fc       	sbrc	r10, 3
 b74:	11 c0       	rjmp	.+34     	; 0xb98 <vfprintf+0x348>
 b76:	a0 fe       	sbrs	r10, 0
 b78:	06 c0       	rjmp	.+12     	; 0xb86 <vfprintf+0x336>
 b7a:	b2 14       	cp	r11, r2
 b7c:	88 f4       	brcc	.+34     	; 0xba0 <vfprintf+0x350>
 b7e:	28 0c       	add	r2, r8
 b80:	92 2c       	mov	r9, r2
 b82:	9b 18       	sub	r9, r11
 b84:	0e c0       	rjmp	.+28     	; 0xba2 <vfprintf+0x352>
 b86:	b2 14       	cp	r11, r2
 b88:	60 f4       	brcc	.+24     	; 0xba2 <vfprintf+0x352>
 b8a:	b6 01       	movw	r22, r12
 b8c:	80 e2       	ldi	r24, 0x20	; 32
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 b94:	b3 94       	inc	r11
 b96:	f7 cf       	rjmp	.-18     	; 0xb86 <vfprintf+0x336>
 b98:	b2 14       	cp	r11, r2
 b9a:	18 f4       	brcc	.+6      	; 0xba2 <vfprintf+0x352>
 b9c:	2b 18       	sub	r2, r11
 b9e:	02 c0       	rjmp	.+4      	; 0xba4 <vfprintf+0x354>
 ba0:	98 2c       	mov	r9, r8
 ba2:	21 2c       	mov	r2, r1
 ba4:	a4 fe       	sbrs	r10, 4
 ba6:	10 c0       	rjmp	.+32     	; 0xbc8 <vfprintf+0x378>
 ba8:	b6 01       	movw	r22, r12
 baa:	80 e3       	ldi	r24, 0x30	; 48
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 bb2:	a2 fe       	sbrs	r10, 2
 bb4:	17 c0       	rjmp	.+46     	; 0xbe4 <vfprintf+0x394>
 bb6:	a1 fc       	sbrc	r10, 1
 bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <vfprintf+0x370>
 bba:	88 e7       	ldi	r24, 0x78	; 120
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <vfprintf+0x374>
 bc0:	88 e5       	ldi	r24, 0x58	; 88
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	b6 01       	movw	r22, r12
 bc6:	0c c0       	rjmp	.+24     	; 0xbe0 <vfprintf+0x390>
 bc8:	8a 2d       	mov	r24, r10
 bca:	86 78       	andi	r24, 0x86	; 134
 bcc:	59 f0       	breq	.+22     	; 0xbe4 <vfprintf+0x394>
 bce:	a1 fe       	sbrs	r10, 1
 bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <vfprintf+0x386>
 bd2:	8b e2       	ldi	r24, 0x2B	; 43
 bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <vfprintf+0x388>
 bd6:	80 e2       	ldi	r24, 0x20	; 32
 bd8:	a7 fc       	sbrc	r10, 7
 bda:	8d e2       	ldi	r24, 0x2D	; 45
 bdc:	b6 01       	movw	r22, r12
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 be4:	89 14       	cp	r8, r9
 be6:	38 f4       	brcc	.+14     	; 0xbf6 <vfprintf+0x3a6>
 be8:	b6 01       	movw	r22, r12
 bea:	80 e3       	ldi	r24, 0x30	; 48
 bec:	90 e0       	ldi	r25, 0x00	; 0
 bee:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 bf2:	9a 94       	dec	r9
 bf4:	f7 cf       	rjmp	.-18     	; 0xbe4 <vfprintf+0x394>
 bf6:	8a 94       	dec	r8
 bf8:	f3 01       	movw	r30, r6
 bfa:	e8 0d       	add	r30, r8
 bfc:	f1 1d       	adc	r31, r1
 bfe:	80 81       	ld	r24, Z
 c00:	b6 01       	movw	r22, r12
 c02:	90 e0       	ldi	r25, 0x00	; 0
 c04:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 c08:	81 10       	cpse	r8, r1
 c0a:	f5 cf       	rjmp	.-22     	; 0xbf6 <vfprintf+0x3a6>
 c0c:	22 20       	and	r2, r2
 c0e:	09 f4       	brne	.+2      	; 0xc12 <vfprintf+0x3c2>
 c10:	42 ce       	rjmp	.-892    	; 0x896 <vfprintf+0x46>
 c12:	b6 01       	movw	r22, r12
 c14:	80 e2       	ldi	r24, 0x20	; 32
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 c1c:	2a 94       	dec	r2
 c1e:	f6 cf       	rjmp	.-20     	; 0xc0c <vfprintf+0x3bc>
 c20:	f6 01       	movw	r30, r12
 c22:	86 81       	ldd	r24, Z+6	; 0x06
 c24:	97 81       	ldd	r25, Z+7	; 0x07
 c26:	02 c0       	rjmp	.+4      	; 0xc2c <vfprintf+0x3dc>
 c28:	8f ef       	ldi	r24, 0xFF	; 255
 c2a:	9f ef       	ldi	r25, 0xFF	; 255
 c2c:	2b 96       	adiw	r28, 0x0b	; 11
 c2e:	cd bf       	out	0x3d, r28	; 61
 c30:	de bf       	out	0x3e, r29	; 62
 c32:	df 91       	pop	r29
 c34:	cf 91       	pop	r28
 c36:	1f 91       	pop	r17
 c38:	0f 91       	pop	r16
 c3a:	ff 90       	pop	r15
 c3c:	ef 90       	pop	r14
 c3e:	df 90       	pop	r13
 c40:	cf 90       	pop	r12
 c42:	bf 90       	pop	r11
 c44:	af 90       	pop	r10
 c46:	9f 90       	pop	r9
 c48:	8f 90       	pop	r8
 c4a:	7f 90       	pop	r7
 c4c:	6f 90       	pop	r6
 c4e:	5f 90       	pop	r5
 c50:	4f 90       	pop	r4
 c52:	3f 90       	pop	r3
 c54:	2f 90       	pop	r2
 c56:	08 95       	ret

00000c58 <strnlen_P>:
 c58:	fc 01       	movw	r30, r24
 c5a:	05 90       	lpm	r0, Z+
 c5c:	61 50       	subi	r22, 0x01	; 1
 c5e:	70 40       	sbci	r23, 0x00	; 0
 c60:	01 10       	cpse	r0, r1
 c62:	d8 f7       	brcc	.-10     	; 0xc5a <strnlen_P+0x2>
 c64:	80 95       	com	r24
 c66:	90 95       	com	r25
 c68:	8e 0f       	add	r24, r30
 c6a:	9f 1f       	adc	r25, r31
 c6c:	08 95       	ret

00000c6e <strnlen>:
 c6e:	fc 01       	movw	r30, r24
 c70:	61 50       	subi	r22, 0x01	; 1
 c72:	70 40       	sbci	r23, 0x00	; 0
 c74:	01 90       	ld	r0, Z+
 c76:	01 10       	cpse	r0, r1
 c78:	d8 f7       	brcc	.-10     	; 0xc70 <strnlen+0x2>
 c7a:	80 95       	com	r24
 c7c:	90 95       	com	r25
 c7e:	8e 0f       	add	r24, r30
 c80:	9f 1f       	adc	r25, r31
 c82:	08 95       	ret

00000c84 <fputc>:
 c84:	0f 93       	push	r16
 c86:	1f 93       	push	r17
 c88:	cf 93       	push	r28
 c8a:	df 93       	push	r29
 c8c:	fb 01       	movw	r30, r22
 c8e:	23 81       	ldd	r18, Z+3	; 0x03
 c90:	21 fd       	sbrc	r18, 1
 c92:	03 c0       	rjmp	.+6      	; 0xc9a <fputc+0x16>
 c94:	8f ef       	ldi	r24, 0xFF	; 255
 c96:	9f ef       	ldi	r25, 0xFF	; 255
 c98:	2c c0       	rjmp	.+88     	; 0xcf2 <fputc+0x6e>
 c9a:	22 ff       	sbrs	r18, 2
 c9c:	16 c0       	rjmp	.+44     	; 0xcca <fputc+0x46>
 c9e:	46 81       	ldd	r20, Z+6	; 0x06
 ca0:	57 81       	ldd	r21, Z+7	; 0x07
 ca2:	24 81       	ldd	r18, Z+4	; 0x04
 ca4:	35 81       	ldd	r19, Z+5	; 0x05
 ca6:	42 17       	cp	r20, r18
 ca8:	53 07       	cpc	r21, r19
 caa:	44 f4       	brge	.+16     	; 0xcbc <fputc+0x38>
 cac:	a0 81       	ld	r26, Z
 cae:	b1 81       	ldd	r27, Z+1	; 0x01
 cb0:	9d 01       	movw	r18, r26
 cb2:	2f 5f       	subi	r18, 0xFF	; 255
 cb4:	3f 4f       	sbci	r19, 0xFF	; 255
 cb6:	20 83       	st	Z, r18
 cb8:	31 83       	std	Z+1, r19	; 0x01
 cba:	8c 93       	st	X, r24
 cbc:	26 81       	ldd	r18, Z+6	; 0x06
 cbe:	37 81       	ldd	r19, Z+7	; 0x07
 cc0:	2f 5f       	subi	r18, 0xFF	; 255
 cc2:	3f 4f       	sbci	r19, 0xFF	; 255
 cc4:	26 83       	std	Z+6, r18	; 0x06
 cc6:	37 83       	std	Z+7, r19	; 0x07
 cc8:	14 c0       	rjmp	.+40     	; 0xcf2 <fputc+0x6e>
 cca:	8b 01       	movw	r16, r22
 ccc:	ec 01       	movw	r28, r24
 cce:	fb 01       	movw	r30, r22
 cd0:	00 84       	ldd	r0, Z+8	; 0x08
 cd2:	f1 85       	ldd	r31, Z+9	; 0x09
 cd4:	e0 2d       	mov	r30, r0
 cd6:	09 95       	icall
 cd8:	89 2b       	or	r24, r25
 cda:	e1 f6       	brne	.-72     	; 0xc94 <fputc+0x10>
 cdc:	d8 01       	movw	r26, r16
 cde:	16 96       	adiw	r26, 0x06	; 6
 ce0:	8d 91       	ld	r24, X+
 ce2:	9c 91       	ld	r25, X
 ce4:	17 97       	sbiw	r26, 0x07	; 7
 ce6:	01 96       	adiw	r24, 0x01	; 1
 ce8:	16 96       	adiw	r26, 0x06	; 6
 cea:	8d 93       	st	X+, r24
 cec:	9c 93       	st	X, r25
 cee:	17 97       	sbiw	r26, 0x07	; 7
 cf0:	ce 01       	movw	r24, r28
 cf2:	df 91       	pop	r29
 cf4:	cf 91       	pop	r28
 cf6:	1f 91       	pop	r17
 cf8:	0f 91       	pop	r16
 cfa:	08 95       	ret

00000cfc <__ultoa_invert>:
 cfc:	fa 01       	movw	r30, r20
 cfe:	aa 27       	eor	r26, r26
 d00:	28 30       	cpi	r18, 0x08	; 8
 d02:	51 f1       	breq	.+84     	; 0xd58 <__ultoa_invert+0x5c>
 d04:	20 31       	cpi	r18, 0x10	; 16
 d06:	81 f1       	breq	.+96     	; 0xd68 <__ultoa_invert+0x6c>
 d08:	e8 94       	clt
 d0a:	6f 93       	push	r22
 d0c:	6e 7f       	andi	r22, 0xFE	; 254
 d0e:	6e 5f       	subi	r22, 0xFE	; 254
 d10:	7f 4f       	sbci	r23, 0xFF	; 255
 d12:	8f 4f       	sbci	r24, 0xFF	; 255
 d14:	9f 4f       	sbci	r25, 0xFF	; 255
 d16:	af 4f       	sbci	r26, 0xFF	; 255
 d18:	b1 e0       	ldi	r27, 0x01	; 1
 d1a:	3e d0       	rcall	.+124    	; 0xd98 <__ultoa_invert+0x9c>
 d1c:	b4 e0       	ldi	r27, 0x04	; 4
 d1e:	3c d0       	rcall	.+120    	; 0xd98 <__ultoa_invert+0x9c>
 d20:	67 0f       	add	r22, r23
 d22:	78 1f       	adc	r23, r24
 d24:	89 1f       	adc	r24, r25
 d26:	9a 1f       	adc	r25, r26
 d28:	a1 1d       	adc	r26, r1
 d2a:	68 0f       	add	r22, r24
 d2c:	79 1f       	adc	r23, r25
 d2e:	8a 1f       	adc	r24, r26
 d30:	91 1d       	adc	r25, r1
 d32:	a1 1d       	adc	r26, r1
 d34:	6a 0f       	add	r22, r26
 d36:	71 1d       	adc	r23, r1
 d38:	81 1d       	adc	r24, r1
 d3a:	91 1d       	adc	r25, r1
 d3c:	a1 1d       	adc	r26, r1
 d3e:	20 d0       	rcall	.+64     	; 0xd80 <__ultoa_invert+0x84>
 d40:	09 f4       	brne	.+2      	; 0xd44 <__ultoa_invert+0x48>
 d42:	68 94       	set
 d44:	3f 91       	pop	r19
 d46:	2a e0       	ldi	r18, 0x0A	; 10
 d48:	26 9f       	mul	r18, r22
 d4a:	11 24       	eor	r1, r1
 d4c:	30 19       	sub	r19, r0
 d4e:	30 5d       	subi	r19, 0xD0	; 208
 d50:	31 93       	st	Z+, r19
 d52:	de f6       	brtc	.-74     	; 0xd0a <__ultoa_invert+0xe>
 d54:	cf 01       	movw	r24, r30
 d56:	08 95       	ret
 d58:	46 2f       	mov	r20, r22
 d5a:	47 70       	andi	r20, 0x07	; 7
 d5c:	40 5d       	subi	r20, 0xD0	; 208
 d5e:	41 93       	st	Z+, r20
 d60:	b3 e0       	ldi	r27, 0x03	; 3
 d62:	0f d0       	rcall	.+30     	; 0xd82 <__ultoa_invert+0x86>
 d64:	c9 f7       	brne	.-14     	; 0xd58 <__ultoa_invert+0x5c>
 d66:	f6 cf       	rjmp	.-20     	; 0xd54 <__ultoa_invert+0x58>
 d68:	46 2f       	mov	r20, r22
 d6a:	4f 70       	andi	r20, 0x0F	; 15
 d6c:	40 5d       	subi	r20, 0xD0	; 208
 d6e:	4a 33       	cpi	r20, 0x3A	; 58
 d70:	18 f0       	brcs	.+6      	; 0xd78 <__ultoa_invert+0x7c>
 d72:	49 5d       	subi	r20, 0xD9	; 217
 d74:	31 fd       	sbrc	r19, 1
 d76:	40 52       	subi	r20, 0x20	; 32
 d78:	41 93       	st	Z+, r20
 d7a:	02 d0       	rcall	.+4      	; 0xd80 <__ultoa_invert+0x84>
 d7c:	a9 f7       	brne	.-22     	; 0xd68 <__ultoa_invert+0x6c>
 d7e:	ea cf       	rjmp	.-44     	; 0xd54 <__ultoa_invert+0x58>
 d80:	b4 e0       	ldi	r27, 0x04	; 4
 d82:	a6 95       	lsr	r26
 d84:	97 95       	ror	r25
 d86:	87 95       	ror	r24
 d88:	77 95       	ror	r23
 d8a:	67 95       	ror	r22
 d8c:	ba 95       	dec	r27
 d8e:	c9 f7       	brne	.-14     	; 0xd82 <__ultoa_invert+0x86>
 d90:	00 97       	sbiw	r24, 0x00	; 0
 d92:	61 05       	cpc	r22, r1
 d94:	71 05       	cpc	r23, r1
 d96:	08 95       	ret
 d98:	9b 01       	movw	r18, r22
 d9a:	ac 01       	movw	r20, r24
 d9c:	0a 2e       	mov	r0, r26
 d9e:	06 94       	lsr	r0
 da0:	57 95       	ror	r21
 da2:	47 95       	ror	r20
 da4:	37 95       	ror	r19
 da6:	27 95       	ror	r18
 da8:	ba 95       	dec	r27
 daa:	c9 f7       	brne	.-14     	; 0xd9e <__ultoa_invert+0xa2>
 dac:	62 0f       	add	r22, r18
 dae:	73 1f       	adc	r23, r19
 db0:	84 1f       	adc	r24, r20
 db2:	95 1f       	adc	r25, r21
 db4:	a0 1d       	adc	r26, r0
 db6:	08 95       	ret

00000db8 <_exit>:
 db8:	f8 94       	cli

00000dba <__stop_program>:
 dba:	ff cf       	rjmp	.-2      	; 0xdba <__stop_program>
